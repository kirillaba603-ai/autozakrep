import asyncio
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

BOT_TOKEN = "8004523182:AAFtqzYrVIMsrYzcIa-TbdcGmlpZfrHttzc"
DATA_FILE = "bot_data.json"

channel_messages = {}
service_messages = {}
user_channels = {}
auto_pin_tasks = {}
auto_pin_intervals = {}

E = {'menu':'üéõ','channel':'üì¢','pin':'üìå','unpin':'üîì','delete':'üóë','auto':'üîÑ','add':'‚ûï','back':'‚óÄÔ∏è','success':'‚úÖ','error':'‚ùå','info':'‚ÑπÔ∏è','warning':'‚ö†Ô∏è','clock':'‚è±','active':'üü¢','inactive':'üî¥','stats':'üìä','fire':'üî•','chart':'üìà'}

def save_data():
    data = {
        'channel_messages': {str(k): v for k, v in channel_messages.items()},
        'service_messages': {str(k): v for k, v in service_messages.items()},
        'auto_pin_intervals': {str(k): v for k, v in auto_pin_intervals.items()}
    }
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"{E['success']} –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"{E['error']} –û—à–∏–±–∫–∞: {e}")

def load_data():
    global channel_messages, service_messages, auto_pin_intervals
    if not os.path.exists(DATA_FILE):
        print(f"{E['info']} –ë–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞: {DATA_FILE}")
        save_data()
        return
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        channel_messages = {int(k): v for k, v in data.get('channel_messages', {}).items()}
        service_messages = {int(k): v for k, v in data.get('service_messages', {}).items()}
        auto_pin_intervals = {int(k): v for k, v in data.get('auto_pin_intervals', {}).items()}
        print(f"{E['success']} –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(channel_messages)} –∫–∞–Ω–∞–ª–æ–≤")
    except Exception as e:
        print(f"{E['error']} –û—à–∏–±–∫–∞: {e}")

async def safe_edit(query, text, reply_markup=None):
    try:
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        if "message is not modified" not in str(e).lower():
            print(f"{E['error']} {e}")

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üéõ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ïë   üìå PIN MANAGER BOT   ‚ïë\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "‚ö°Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "  üîÑ –ê–≤—Ç–æ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ\n"
        "  üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏\n"
        "  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "  üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n\n"
        "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç!"
    )
    await update.message.reply_text(welcome, reply_markup=get_main_keyboard())

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã" in text:
        await show_channels_menu_text(update, context)
    elif "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" in text:
        instruction = (
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
            "‚ïë  ‚ûï –î–û–ë–ê–í–ò–¢–¨ –ö–ê–ù–ê–õ  ‚ïë\n"
            "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
            "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n"
            "2Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç\n"
            "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 3 —Å—Å—ã–ª–∫–∏ –±–æ—Ç—É\n\n"
            "üìé –ü—Ä–∏–º–µ—Ä:\n"
            "t.me/yourchannel/123"
        )
        await update.message.reply_text(instruction)
    elif "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in text:
        await show_stats(update, context)
    elif "–ü–æ–º–æ—â—å" in text:
        help_text = (
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
            "‚ïë      ‚ÑπÔ∏è –°–ü–†–ê–í–ö–ê      ‚ïë\n"
            "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
            "üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å 3 –ø–æ—Å—Ç–∞\n"
            "   ‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ—Å—Ç–∞\n\n"
            "üîÑ –ê–≤—Ç–æ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ\n"
            "   ‚îî –ü–æ —Ç–∞–π–º–µ—Ä—É\n\n"
            "üóë –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "   ‚îî –ß–∏—Å—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞\n\n"
            "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ—Å—Ç—ã\n"
            "   ‚îî –ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏\n\n"
            "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –±–æ—Ç—É!"
        )
        await update.message.reply_text(help_text)
    elif text.startswith('@'):
        await add_channel_by_username(update, context, text)
    elif "t.me/" in text:
        await handle_post_link(update, context, text)

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_channels = len(channel_messages)
    total_posts = sum(len(posts) for posts in channel_messages.values())
    active_auto = len(auto_pin_tasks)
    
    stats = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ïë   üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê      ‚ïë\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        f"üì¢ –ö–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
        f"üìå –ü–æ—Å—Ç–æ–≤: {total_posts}\n"
        f"üîÑ –ê–≤—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ: {active_auto}\n"
        f"üíæ –ë–∞–∑–∞: {DATA_FILE}\n\n"
        f"{'üü¢ –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ!' if total_channels > 0 else '‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã'}"
    )
    await update.message.reply_text(stats)

async def handle_post_link(update: Update, context: ContextTypes.DEFAULT_TYPE, link: str):
    msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
    await asyncio.sleep(0.3)
    await msg.edit_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª...")
    
    try:
        parts = link.split('/')
        if '/c/' in link:
            channel_id_str = parts[-2]
            message_id = int(parts[-1].split('?')[0])
            chat_id = int(f"-100{channel_id_str}")
        else:
            channel_username = parts[-2]
            message_id = int(parts[-1].split('?')[0])
            if not channel_username.startswith('@'):
                channel_username = '@' + channel_username
            chat = await context.bot.get_chat(channel_username)
            chat_id = chat.id
        
        if chat_id not in channel_messages:
            channel_messages[chat_id] = []
            service_messages[chat_id] = []
        
        if message_id not in channel_messages[chat_id]:
            channel_messages[chat_id].append(message_id)
            channel_messages[chat_id] = sorted(channel_messages[chat_id])[-20:]
        
        await msg.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é...")
        save_data()
        await asyncio.sleep(0.3)
        
        total = len(channel_messages[chat_id])
        chat = await context.bot.get_chat(chat_id)
        
        progress_bar = '‚ñ∞' * total + '‚ñ±' * (3 - min(total, 3))
        
        result = (
            f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            f"‚îÉ üì¢ {chat.title[:15]}\n"
            f"‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
            f"‚îÉ üìå ID: {message_id}\n"
            f"‚îÉ üìä –í—Å–µ–≥–æ: {total}\n"
            f"‚îÉ {progress_bar} {total}/3\n"
            f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
            f"{'üéâ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—é!' if total >= 3 else f'üí° –û—Å—Ç–∞–ª–æ—Å—å: {3-total}'}"
        )
        
        await msg.edit_text(result, reply_markup=get_main_keyboard())
    except Exception as e:
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É")

async def add_channel_by_username(update: Update, context: ContextTypes.DEFAULT_TYPE, username: str):
    if not username.startswith('@'):
        username = '@' + username
    msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª...")
    try:
        chat = await context.bot.get_chat(username)
        chat_id = chat.id
        bot_member = await context.bot.get_chat_member(chat_id, context.bot.id)
        if bot_member.status not in ["administrator","creator"]:
            await msg.edit_text(f"‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ {chat.title}\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞!")
            return
        if chat_id not in channel_messages:
            channel_messages[chat_id] = []
            service_messages[chat_id] = []
        await msg.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é...")
        save_data()
        await asyncio.sleep(0.3)
        await msg.edit_text(f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüì¢ {chat.title}\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ 3 —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã")
    except Exception as e:
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def show_channels_menu_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not channel_messages:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
        return
    keyboard = []
    for chat_id in channel_messages.keys():
        try:
            chat = await context.bot.get_chat(chat_id)
            status = "üî•" if chat_id in auto_pin_tasks else "üí§"
            posts = len(channel_messages.get(chat_id,[]))
            keyboard.append([InlineKeyboardButton(f"{status} {chat.title} ‚Ä¢ {posts} –ø–æ—Å—Ç–æ–≤",callback_data=f"ch_{chat_id}")])
        except:
            continue
    if keyboard:
        header = (
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
            "‚ïë   üéõ –ú–û–ò –ö–ê–ù–ê–õ–´     ‚ïë\n"
            "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
            "üî• = –ê–≤—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ\n"
            "üí§ = –ê–≤—Ç–æ –≤—ã–∫–ª—é—á–µ–Ω–æ"
        )
        await update.message.reply_text(header, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_channel_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if "_" in query.data:
        chat_id = int(query.data.split("_")[1])
        user_channels[update.effective_user.id] = chat_id
    else:
        chat_id = user_channels.get(update.effective_user.id)
        if not chat_id:
            await safe_edit(query, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
    try:
        chat = await context.bot.get_chat(chat_id)
        posts = len(channel_messages.get(chat_id,[]))
        auto_status = "üî• –ê–∫—Ç–∏–≤–Ω–æ" if chat_id in auto_pin_tasks else "üí§ –í—ã–∫–ª—é—á–µ–Ω–æ"
        interval = auto_pin_intervals.get(chat_id,30)
        
        card = (
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            f"‚îÉ üì¢ {chat.title[:15]}\n"
            "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
            f"‚îÉ üìä –ü–æ—Å—Ç–æ–≤: {posts}\n"
            f"‚îÉ üîÑ –ê–≤—Ç–æ: {auto_status}\n"
            f"‚îÉ ‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval}–º\n"
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å",callback_data="pin"), InlineKeyboardButton("üîì –û—Ç–∫—Ä–µ–ø–∏—Ç—å",callback_data="unpin")],
            [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å",callback_data="del"), InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å",callback_data="reset")],
            [InlineKeyboardButton(f"‚öôÔ∏è –ê–≤—Ç–æ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ ({interval}–º)",callback_data="auto")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",callback_data="back")]
        ]
        await safe_edit(query, card, InlineKeyboardMarkup(keyboard))
    except Exception as e:
        await safe_edit(query, f"‚ùå {e}")

async def pin_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = user_channels.get(update.effective_user.id)
    if not chat_id:
        return
    try:
        if len(channel_messages.get(chat_id,[])) < 3:
            await safe_edit(query, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–æ–≤!\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É 3 —Å—Å—ã–ª–∫–∏")
            return
        
        await safe_edit(query, "üîì –û—Ç–∫—Ä–µ–ø–ª—è—é –≤—Å–µ...")
        await context.bot.unpin_all_chat_messages(chat_id)
        await asyncio.sleep(0.5)
        
        await safe_edit(query, "üìå –ó–∞–∫—Ä–µ–ø–ª—è—é –ø–æ—Å—Ç—ã...")
        last_three = sorted(channel_messages[chat_id])[-3:]
        pinned = 0
        for msg_id in last_three:
            try:
                await context.bot.pin_chat_message(chat_id=chat_id,message_id=msg_id)
                pinned += 1
                await asyncio.sleep(0.3)
            except:
                pass
        
        await query.answer(f"üéâ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {pinned}/3", show_alert=True)
        await asyncio.sleep(1)
        await show_channel_menu(update,context)
    except Exception as e:
        await query.answer(f"‚ùå {e}", show_alert=True)

async def unpin_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = user_channels.get(update.effective_user.id)
    if chat_id:
        try:
            await context.bot.unpin_all_chat_messages(chat_id)
            await query.answer("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω—ã", show_alert=True)
            await show_channel_menu(update,context)
        except Exception as e:
            await query.answer(f"‚ùå {e}", show_alert=True)

async def delete_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = user_channels.get(update.effective_user.id)
    if not chat_id:
        return
    deleted = 0
    if chat_id in service_messages:
        for msg_id in service_messages[chat_id]:
            try:
                await context.bot.delete_message(chat_id,msg_id)
                deleted += 1
                await asyncio.sleep(0.2)
            except:
                pass
        service_messages[chat_id] = []
        save_data()
    await query.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ: {deleted}" if deleted else "‚ÑπÔ∏è –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", show_alert=True)

async def reset_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = user_channels.get(update.effective_user.id)
    if not chat_id:
        return
    try:
        old_count = len(channel_messages.get(chat_id, []))
        channel_messages[chat_id] = []
        service_messages[chat_id] = []
        save_data()
        await query.answer(f"üîÑ –°–±—Ä–æ—à–µ–Ω–æ: {old_count} –ø–æ—Å—Ç–æ–≤", show_alert=True)
        await show_channel_menu(update, context)
    except Exception as e:
        await query.answer(f"‚ùå {e}", show_alert=True)

async def show_auto_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = user_channels.get(update.effective_user.id)
    if not chat_id:
        return
    is_active = chat_id in auto_pin_tasks
    interval = auto_pin_intervals.get(chat_id,30)
    
    menu = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ïë  üîÑ –ê–í–¢–û–ó–ê–ö–†–ï–ü–õ–ï–ù–ò–ï  ‚ïë\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'üî• –ê–∫—Ç–∏–≤–Ω–æ' if is_active else 'üí§ –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω\n\n"
        "–¶–∏–∫–ª:\n"
        "1Ô∏è‚É£ –û—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ\n"
        "2Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "3Ô∏è‚É£ –ó–∞–∫—Ä–µ–ø–∏—Ç—å 3 –ø–æ—Å—Ç–∞"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è± 15–º",callback_data="ai_15"), InlineKeyboardButton("‚è± 30–º",callback_data="ai_30")],
        [InlineKeyboardButton("‚è± 1—á",callback_data="ai_60"), InlineKeyboardButton("‚è± 2—á",callback_data="ai_120")],
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç (–≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å)",callback_data="test")]
    ]
    if is_active:
        keyboard.append([InlineKeyboardButton("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",callback_data="as")])
    else:
        keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å",callback_data="ar")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",callback_data=f"ch_{chat_id}")])
    
    await safe_edit(query, menu, InlineKeyboardMarkup(keyboard))

async def set_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = user_channels.get(update.effective_user.id)
    if chat_id:
        interval = int(query.data.split("_")[1])
        auto_pin_intervals[chat_id] = interval
        save_data()
        await query.answer(f"‚ö°Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω", show_alert=True)
        await show_auto_menu(update,context)

async def auto_cycle(context: ContextTypes.DEFAULT_TYPE, chat_id: int, is_first_run: bool = False):
    try:
        if not is_first_run:
            if chat_id in service_messages:
                for msg_id in service_messages[chat_id]:
                    try:
                        await context.bot.delete_message(chat_id, msg_id)
                        await asyncio.sleep(0.2)
                    except:
                        pass
                service_messages[chat_id] = []
            await asyncio.sleep(1)
        
        await context.bot.unpin_all_chat_messages(chat_id)
        await asyncio.sleep(1)
        
        if chat_id in channel_messages and len(channel_messages[chat_id]) >= 3:
            for msg_id in sorted(channel_messages[chat_id])[-3:]:
                try:
                    await context.bot.pin_chat_message(chat_id=chat_id, message_id=msg_id)
                    await asyncio.sleep(0.3)
                except:
                    pass
        print(f"üî• –ê–≤—Ç–æ—Ü–∏–∫–ª: {chat_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_auto_cycle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = user_channels.get(update.effective_user.id)
    if not chat_id:
        return
    try:
        await query.answer("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...", show_alert=True)
        await safe_edit(query, "üß™ –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç–æ–≤—ã–π —Ü–∏–∫–ª...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        await auto_cycle(context, chat_id, is_first_run=False)
        chat = await context.bot.get_chat(chat_id)
        await asyncio.sleep(1)
        
        result = (
            "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            f"üì¢ {chat.title}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "‚úì –ü–æ—Å—Ç—ã –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã\n"
            "‚úì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã\n"
            "‚úì –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        )
        await safe_edit(query, result)
        await asyncio.sleep(2)
        await show_auto_menu(update, context)
    except Exception as e:
        await query.answer(f"‚ùå {e}", show_alert=True)

async def start_auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = user_channels.get(update.effective_user.id)
    if not chat_id:
        return
    interval = auto_pin_intervals.get(chat_id,30)
    if chat_id in auto_pin_tasks:
        await query.answer("‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!", show_alert=True)
        return
    
    async def task():
        is_first = True
        while chat_id in auto_pin_tasks:
            await auto_cycle(context, chat_id, is_first_run=is_first)
            is_first = False
            await asyncio.sleep(interval * 60)
    
    auto_pin_tasks[chat_id] = asyncio.create_task(task())
    await query.answer(f"üî• –ê–≤—Ç–æ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω", show_alert=True)
    await show_auto_menu(update,context)

async def stop_auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = user_channels.get(update.effective_user.id)
    if chat_id and chat_id in auto_pin_tasks:
        auto_pin_tasks[chat_id].cancel()
        del auto_pin_tasks[chat_id]
        await query.answer("‚õîÔ∏è –ê–≤—Ç–æ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", show_alert=True)
    else:
        await query.answer("‚ÑπÔ∏è –ù–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ", show_alert=True)
    await show_auto_menu(update,context)

async def track_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.channel_post:
        chat_id = update.channel_post.chat_id
        message_id = update.channel_post.message_id
        if chat_id not in channel_messages:
            channel_messages[chat_id] = []
            service_messages[chat_id] = []
        if update.channel_post.pinned_message:
            if message_id not in service_messages[chat_id]:
                service_messages[chat_id].append(message_id)
        else:
            if message_id not in channel_messages[chat_id]:
                channel_messages[chat_id].append(message_id)
                channel_messages[chat_id] = channel_messages[chat_id][-20:]
                save_data()

async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    routes = {'ch_':show_channel_menu,'pin':pin_posts,'unpin':unpin_posts,'del':delete_service,'reset':reset_posts,'auto':show_auto_menu,'ai_':set_interval,'ar':start_auto,'as':stop_auto,'test':test_auto_cycle,'back':show_channels_menu_callback}
    for prefix, handler in routes.items():
        if data.startswith(prefix) or data == prefix:
            await handler(update,context)
            return

async def show_channels_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if not channel_messages:
        await safe_edit(query, "‚ÑπÔ∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤")
        return
    keyboard = []
    for chat_id in channel_messages.keys():
        try:
            chat = await context.bot.get_chat(chat_id)
            status = "üî•" if chat_id in auto_pin_tasks else "üí§"
            posts = len(channel_messages.get(chat_id,[]))
            keyboard.append([InlineKeyboardButton(f"{status} {chat.title} ‚Ä¢ {posts}",callback_data=f"ch_{chat_id}")])
        except:
            continue
    if keyboard:
        await safe_edit(query, "üéõ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", InlineKeyboardMarkup(keyboard))

def main():
    load_data()
    app = Application.builder().token(BOT_TOKEN).build()
    
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
        if "message is not modified" not in str(context.error).lower():
            print(f"‚ùå {context.error}")
    
    app.add_error_handler(error_handler)
    app.add_handler(CommandHandler("start",start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,handle_text_messages))
    app.add_handler(MessageHandler(filters.ChatType.CHANNEL,track_messages))
    app.add_handler(CallbackQueryHandler(callback_router))
    
    print("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë  üî• PIN MANAGER BOT üî•  ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üíæ –ë–∞–∑–∞: {DATA_FILE}\n")
    
    try:
        app.run_polling(allowed_updates=Update.ALL_TYPES)
    finally:
        save_data()
        print("\n‚õîÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n")

if __name__ == "__main__":
    main()
